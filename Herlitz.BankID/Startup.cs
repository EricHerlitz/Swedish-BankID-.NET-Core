using System;
using System.IO;
using System.Linq;
using System.Reflection;
using Herlitz.BankID.Core;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.OpenApi.Models;


// dotnet dev-certs https --trust

namespace Herlitz.BankID
{
    public class Startup
    {
        private readonly IWebHostEnvironment _environment;
        public IConfiguration Configuration { get; }

        private bool _useXmlComments = false;


        public Startup(IConfiguration configuration, IWebHostEnvironment environment)
        {
            _environment = environment;

            var builder = new ConfigurationBuilder()
                .SetBasePath(environment.ContentRootPath)
                .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true)
                .AddJsonFile($"appsettings.{environment.EnvironmentName}.json", optional: true, reloadOnChange: true)
                .AddEnvironmentVariables();

            if (environment.IsDevelopment())
            {
                //builder.AddUserSecrets<Startup>();
            }

            Configuration = builder.Build();
        }


        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            // Appsettings
            services.Configure<BankIDConfig>(Configuration.GetSection(typeof(BankIDConfig).Name));
            services.Configure<OrderCaching>(Configuration.GetSection(typeof(OrderCaching).Name));

            // Caching
            var orderCaching = Configuration.GetSection(typeof(OrderCaching).Name).Get<OrderCaching>();
            if (orderCaching.Allow)
            {
                services.AddMemoryCache(); // for the IMemoryCache
                services.AddDistributedMemoryCache();
            }

            // Add bankid
            services.AddBankID();

            // Add http context accessor
            services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();

            // Configure Swagger
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", Configuration.GetSection(typeof(OpenApiInfo).Name).Get<OpenApiInfo>());

                if (_useXmlComments)
                {
                    //Locate the XML file being generated by ASP.NET...
                    var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
                    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

                    //... and tell Swagger to use those XML comments.
                    c.IncludeXmlComments(xmlPath);
                }

                c.ResolveConflictingActions(apiDescriptions => apiDescriptions.First());
            });


            // Telemetry (optional)
            services.AddApplicationInsightsTelemetry();

            // boot
            services.AddControllers();

        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseHttpsRedirection();

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });


            app.UseSwagger(c =>
            {

            });

            // Enable middleware to serve swagger-ui (HTML, JS, CSS, etc.), specifying the Swagger JSON endpoint.
            app.UseSwaggerUI(c =>
            {
                c.SwaggerEndpoint("/swagger/v1/swagger.json", "BankIDAPI");
            });

        }
    }
}
