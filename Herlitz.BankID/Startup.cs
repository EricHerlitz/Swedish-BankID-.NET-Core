using System;
using System.IO;
using System.Linq;
using System.Net.Http.Headers;
using System.Reflection;
using Herlitz.BankID.Core;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Swashbuckle.AspNetCore.Swagger;

namespace Herlitz.BankID
{
    public class Startup
    {
        private readonly IHostingEnvironment _environment;
        public IConfiguration Configuration { get; }

        private bool _useXmlComments = false;


        public Startup(IConfiguration configuration, IHostingEnvironment environment)
        {
            _environment = environment;

            var builder = new ConfigurationBuilder()
                .SetBasePath(environment.ContentRootPath)
                .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true)
                .AddJsonFile($"appsettings.{environment.EnvironmentName}.json", optional: true, reloadOnChange: true)
                .AddEnvironmentVariables();

            if (environment.IsDevelopment())
            {
                //builder.AddUserSecrets<Startup>();
            }

            Configuration = builder.Build();
        }


        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.Configure<BankIDConfig>(Configuration.GetSection(typeof(BankIDConfig).Name));

            // Add bankid
            services.AddBankID();

            // Add http context accessor
            services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();

            // Configure Swagger
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new Info
                {
                    Title = "Herlitz BankID internal API",
                    Description = "Internal API for BankID services",
                    Version = "1.0",
                    Contact = new Contact
                    {
                        Name = "Whom Ever",
                        Email = "whomever@what.com"
                    }
                });

                if (_useXmlComments)
                {
                    //Locate the XML file being generated by ASP.NET...
                    var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
                    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

                    //... and tell Swagger to use those XML comments.
                    c.IncludeXmlComments(xmlPath);
                }

                c.ResolveConflictingActions(apiDescriptions => apiDescriptions.First());
            });

            // boot
            services
                .AddMvc(options =>
                {
                    options.Filters.Add<ExceptionActionFilter>();
                })
                .SetCompatibilityVersion(CompatibilityVersion.Version_2_2);
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }

            app.UseHttpsRedirection();
            app.UseMvc();


            app.UseSwagger(c =>
            {

            });

            // Enable middleware to serve swagger-ui (HTML, JS, CSS, etc.), specifying the Swagger JSON endpoint.
            app.UseSwaggerUI(c =>
            {
                c.SwaggerEndpoint("/swagger/v1/swagger.json", "BankIDAPI");
            });

        }
    }
}
